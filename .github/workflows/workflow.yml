on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  Build_and_Quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: App Settings Variable Substitution
        uses: microsoft/variable-substitution@v1
        with:
          files: ${{ github.workspace }}/MovieCrew.API/appsettings.json
        env:
          JwtConfiguration.passphrase: "Fake phrase for analysis purpose : Virtual-Earflap-Expiring-Gangway-Hatchback-Sabbath-Nape-Skyline3-Angelfish-Whacky-Snowless"
      - name: SonarScanner
        uses: highbyte/sonarscan-dotnet@v2.2.2
        with:
          sonarProjectKey: MovieCrew
          sonarProjectName: MovieCrew
          sonarHostname: ${{ secrets.SONAR_HOST_URL }}
          dotnetTestArguments: --logger trx --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
          sonarBeginArguments: /d:sonar.cs.opencover.reportsPaths="**/TestResults/**/coverage.opencover.xml" -d:sonar.cs.vstest.reportsPaths="**/TestResults/*.trx"

  Deploy:
    needs: Build_and_Quality
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: App Settings Variable Substitution
        uses: microsoft/variable-substitution@v1
        with:
          files: ${{ github.workspace }}/MovieCrew.API/appsettings.json
        env:
          ConnectionStrings.DefaultConnection: "${{ secrets.CONNECTION_STRING }}"
          JwtConfiguration.passphrase: "${{ secrets.JWT_PASSPHRASE }}"
          ThirdPartyMovieDatabaseProvider.BaseUrl: "https://api.themoviedb.org/3"
          ThirdPartyMovieDatabaseProvider.PosterBaseUrl: "https://image.tmdb.org/t/p/original/"
          ThirdPartyMovieDatabaseProvider.ApiKey: "${{ secrets.THIRDPARTYMOVIEAPI }}"

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME  }}
          tags: |
            type=ref,event=branch
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}



env:
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  GITHUB_REPO: ${{ github.repository }}
  IMAGE_NAME: ${{ github.repository }}
  REGISTRY: ghcr.io
