on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
jobs:
  Build_and_Quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: App Settings Variable Substitution
        uses: microsoft/variable-substitution@v1
        with:
          files: ${{ github.workspace }}/MovieCrew.API/appsettings.json
        env:
          JwtConfiguration.passphrase: "fake phrase for the analysis purpose"
      - name: SonarScanner
        uses: highbyte/sonarscan-dotnet@v2.2.2
        with:
          sonarProjectKey: MovieCrew
          sonarProjectName: MovieCrew
          sonarHostname: ${{ secrets.SONAR_HOST_URL }}
          dotnetTestArguments: --logger trx --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
          sonarBeginArguments: /d:sonar.cs.opencover.reportsPaths="**/TestResults/**/coverage.opencover.xml" -d:sonar.cs.vstest.reportsPaths="**/TestResults/*.trx"

  Deploy:
    needs: Build_and_Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: App Settings Variable Substitution
        uses: microsoft/variable-substitution@v1
        with:
          files: ${{ github.workspace }}/MovieCrew.API/appsettings.json
        env:
          ConnectionStrings.DefaultConnection: "${{ secrets.CONNECTION_STRING }}"
          JwtConfiguration.passphrase: "${{ secrets.JWT_PASSPHRASE }}"
          ThirdPartyMovieDatabaseProvider.BaseUrl: "https://api.themoviedb.org/3"
          ThirdPartyMovieDatabaseProvider.PosterBaseUrl: "https://image.tmdb.org/t/p/original/"
          ThirdPartyMovieDatabaseProvider.ApiKey: "${{ secrets.THIRDPARTYMOVIEAPI }}"
      - name: Create appsetting env variable
        run: |
          appsettings="APPSETTING_JSON=$(cat ${{ github.workspace }}/MovieCrew.API/appsettings.json)"
          echo $appsettings >> $GITHUB_ENV
      - name: run app on docker
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          envs: GITHUB_TOKEN,GITHUB_REPO,GITHUB_PROJECT_NAME,APPSETTING_JSON
          script: |
            git clone https://$GITHUB_TOKEN@github.com/$GITHUB_REPO.git
            cd $GITHUB_PROJECT_NAME
            echo "$APPSETTING_JSON" > MovieCrew.API/appsettings.json
            docker build --tag ${{ vars.DOCKER_IMAGE_NAME }}:latest .
            if docker stop ${{ vars.DOCKER_CONTAINER_NAME }}; then docker rm ${{ vars.DOCKER_CONTAINER_NAME }}; fi
            docker run -d -p ${{ vars.MOVIECREW_API_PORT }}:443 --name ${{ vars.DOCKER_CONTAINER_NAME }} ${{ vars.DOCKER_IMAGE_NAME }}
            cd ..
            rm -rf $GITHUB_PROJECT_NAME

env:
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GITHUB_REPO: ${{ github.repository }}
  GITHUB_PROJECT_NAME: ${{ github.event.repository.name }}
